<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Planetary Orbit Simulator</title>
  <style>
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      background-color: black;
      margin: 0;
    }
    canvas {
      border: 1px solid white;
      background-color: black;
    }
  </style>
</head>
<body>
  <canvas id="orbitCanvas" width="800" height="800"></canvas>
  <script>
    const canvas = document.getElementById('orbitCanvas');
    const ctx = canvas.getContext('2d');

    const SUN_RADIUS = 20;
    const CENTER_X = canvas.width / 2;
    const CENTER_Y = canvas.height / 2;

    // Planet data: distance from the sun, size, speed, color
    const planets = [
      { distance: 60, size: 5, speed: 0.04, color: 'gray' }, // Mercury
      { distance: 100, size: 8, speed: 0.03, color: 'orange' }, // Venus
      { distance: 150, size: 9, speed: 0.02, color: 'blue' }, // Earth
      { distance: 200, size: 7, speed: 0.015, color: 'red' }, // Mars
      { distance: 300, size: 15, speed: 0.008, color: 'brown' } // Jupiter
    ];

    let angleOffsets = planets.map(() => Math.random() * Math.PI * 2);

    function drawSun() {
      ctx.beginPath();
      ctx.arc(CENTER_X, CENTER_Y, SUN_RADIUS, 0, Math.PI * 2);
      ctx.fillStyle = 'yellow';
      ctx.fill();
      ctx.closePath();
    }

    function drawPlanet(planet, angle) {
      const x = CENTER_X + planet.distance * Math.cos(angle);
      const y = CENTER_Y + planet.distance * Math.sin(angle);

      ctx.beginPath();
      ctx.arc(x, y, planet.size, 0, Math.PI * 2);
      ctx.fillStyle = planet.color;
      ctx.fill();
      ctx.closePath();
    }

    function drawOrbit(distance) {
      ctx.beginPath();
      ctx.arc(CENTER_X, CENTER_Y, distance, 0, Math.PI * 2);
      ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';
      ctx.stroke();
      ctx.closePath();
    }

    function update() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Draw Sun
      drawSun();

      // Draw planets and their orbits
      planets.forEach((planet, index) => {
        drawOrbit(planet.distance);
        drawPlanet(planet, angleOffsets[index]);

        // Update planet angle
        angleOffsets[index] += planet.speed;
      });

      requestAnimationFrame(update);
    }

    update();
  </script>
</body>
</html>
